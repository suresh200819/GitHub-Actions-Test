name: 'GCP Deployment'

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  terraform:
    name: 'Terraform'
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    runs-on: ubuntu-latest
    continue-on-error: true

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:       
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    
    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.6
        terraform_wrapper: true
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |
       pwd
       terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
    
    # Format the Terraform code  
    - name: Terraform Format 
      id: fmt
      run: terraform fmt -no-color
      
    # Validate the Terraform code  
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan 
      id: plan    
      run: |
        terraform plan -var-file="/home/runner/work/GitHub-Actions-Test/GitHub-Actions-Test/examples/terraform.tfvars" -out tfplan -no-color
        echo ${{ steps.plan.outputs.stdout }}
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        
    # Terraform Show 
    - name: Terraform Show
      id: show
      run: terraform show -no-color tfplan
      
    # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.event.pull_request.merged = true
      #if: github.ref == 'refs/heads/main' && github.event_name == 'merge'
      run: terraform apply -var-file="/home/runner/work/GitHub-Actions-Test/GitHub-Actions-Test/examples/terraform.tfvars" -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        
    # Post Terraform Plan in PR comments
    - name: Post Terraform Plan in PR comments
      continue-on-error: true
      uses: actions/github-script@v6
      if: github.event.pull_request.merged != true
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const output = `#### Terraform Format üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })


