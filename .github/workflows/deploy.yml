name: 'GCP Deployment'

on:
  workflow_call:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:  
          
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    
    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.6
        terraform_wrapper: true
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |
       pwd
       cat ${{ secrets.GOOGLE_CREDENTIALS }}
       terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
    
    # Format the Terraform code  
    - name: Terraform Format 
      id: fmt
      run: terraform fmt -no-color
      
    # Validate the Terraform code  
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan 
      id: plan    
      run: |
        terraform plan -var-file="${{ secrets.TFVARS_PATH }}" -out tfplan -no-color
        echo ${{ steps.plan.outputs.stdout }}
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        
    # Terraform Show 
    - name: Terraform Show
      id: show
      run: terraform show -no-color tfplan
      
    # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.event.pull_request.merged == true
      #if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
      #if: github.ref == 'refs/heads/main' 
      run: terraform apply -var-file="${{ secrets.TFVARS_PATH }}" -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
