name: 'Terraform workflow'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    ## Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - uses: actions/checkout@v2
    - name: Checkout
      run: |
       ls -R
       pwd
       
   # Validate Packer Template
    - name: Validate Packer Template
      run: packer validate "/home/runner/work/GitHub-Actions-Test/GitHub-Actions-Test/scripts/devops.json"
     
  # Authenticate with GCP
    - name: Authenticate with GCP
      run: |
       echo "${{ secrets.GOOGLE_CREDENTIALS }}" > key.json
       gcloud auth activate-service-account --key-file=key.json --project=nifty-quanta-387606
      
  # Validate GCP Image with same name exists in Account
    - name: Validate Image in GCP Account
      id: check_image
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      run: |
       if sudo gcloud compute images describe devops-image --project=nifty-quanta-387606 --quiet; then
          echo "::set-output name=exist::false"
       fi
      
   # Build Packer Template
    - name: Build Packer Template
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      run: |
       if [[ "${{steps.check_image.outputs.exists }}" == "false" ]]; then
       packer build "/home/runner/work/GitHub-Actions-Test/GitHub-Actions-Test/scripts/devops.json"
       else
        echo "Image already exists. Skipping packer build step."
       fi
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
       pwd
       terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        
    # Format the Terraform code  
    - name: Terraform Format
      run: terraform fmt

    # Generates an execution plan for Terraform
    - name: Terraform Plan      
      run: |
        terraform plan -var-file="/home/runner/work/GitHub-Actions-Test/GitHub-Actions-Test/examples/terraform.tfvars"
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'merge'
      run: terraform apply -var-file="/home/runner/work/GitHub-Actions-Test/GitHub-Actions-Test/examples/terraform.tfvars" -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
